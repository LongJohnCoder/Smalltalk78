'From Smalltalk 5.4hXM on 23 July 1979 at 4:11:02 pm.'\g"Tool"l15000z20000\f5bgClass new title: 'Tool'	subclassof: Object	fields: 'selection  "thing being edited"		window  "window in which the selection is shown"		carrier  "sample of object to be inserted, deleted, or moved"		showCarrier  "selector for showing the carrier"		attachers  "vector of paths to attachers"		attacherObjects  "vector of attacher objects of the carrier			(not the paths)"		attacher  "the current attacher"		attacherNum  "index of the current attacher in attachers"		carrierMove  "selector for a move method for the current			attacher, or nil"		carrierReceiver  "object to which carrierMove is sent			(this is a part of the carrier)"		selectionPart  "moving part in selection"		selectionPath  "path to moving part in selection, or nil"		selectionMove  "selector for a move method for moving parts of			selection, or nil (this part is pointed to by movingPath)"		selectionReceiver  "object to which moveSelection is sent"		stickyParts  "parts of the selection which might merge with			the current attacher"		stickyPaths  "vector of paths to sticky parts"		selectionMerges  "a vector, the same length as attachers.			If the i-th attacher should merge with a part of the selection,			selectionMergesi will be a path to the part in the selection			 that it should merge with.  Otherwise selectionMergesi is nil." 		showForeground  "selector for showing			the moving foreground of the selection, or nil"		spare1 '	declare: '';	asFollows\f5bgThis class has not yet been commented\igInitialization\f5bgcarrier: carrier window: window	[selection_window picturePane contents.	self findShowSelector]\gb33BScheduling\f5bgeachtime | frame offset firstBug pt	["each eachtime, allow the user to position the next attacher"	self nextAttacher.	attacherfalse[false "no more attachers"]	frame_window picturePane frame.  offset_frame origin.	user waitnobug.	"keep showing the carrier until redbug is pressed or		the mouse is outside the picture"	until user redbug do		[firstBug_user mp.		frame has: firstBug[self moveto: firstBug-offset]		"mouse outside picture - stop"		carrier_false.  false].	self positionAttacher: firstBug offset: offset]\gb9B30i5u8U46I47i17I77i86I103i28Ifirsttime | i	[self findAttachers.  attacherNum_0.	attacherObjects_Vector new: attachers length.	for i to: attachers length do		[attacherObjectsi_attachersi applyTo: carrier].	selectionMerges_Vector new: attachers length.	"make sure the buffer has a copy of the picture"	window copyToBuffer]\gb10B223i46Ilasttime	[carrier[self performAction]	window copyFromBuffer.  "don't perform action"	false]\gb10B56i20IStructural Changes\f5bgwillChangeStructure	["The structure of the selection is about to be changed.		Make sure its a prototype"	selection isPrototype[]	selection_selection asPrototype.	window picturePane update.	window buffer update]\gb21B2i82IMoving\f5bgfindSelectionMove | i message transform	["if the current attacher should merge with a part in the selection,		put that part in selectionPart, and a path to it in selectionPath.		Delete the part from stickyParts, and set selectionMove		to a selector for moving that part in the selection.		Put the object which should receive this selector in selectionReceiver.		Find a selector for showing the moving foreground of the		selection (if any)."	i_1.	while (selectionPathnil and istickyParts length) do		[attacher shouldMergeWith: stickyPartsi			[selectionPath_stickyPathsi.  selectionPart_stickyPartsi.			stickyParts_stickyParts replace: i to: i by: ().			stickyPaths_stickyPaths replace: i to: i by: ()]		i_i+1].	selectionPathnil[nil]	message_Message new 		context: selection		receiver: selectionPath		constraint: nil owner: EmptyPath		keywords: ( 'moveby:' )		arguments: ('delta')		uniqueState: true referenceOnly: false compileTimeOnly: false.	transform_selection transform: message.	selectionReceiver_transform receiver applyTo: selection.	selectionMove_transform selector.	showForeground_selection foregroundSelector:		window formatPane showSelector message: message]\gb18B25i86u13U22u13U25u11U10u13U111u17U82IfindStickyParts: oldAttacher  "find parts that want to merge with the attacher"		| i cl	[oldAttacher classattacher class["current sticky parts are ok"]	"find the most distant superclass with instance state"	cl_attacher class.	while cl superclass instsize>0 do [cl_cl superclass].	stickyPaths_selection instancePaths: cl.	stickyParts_Vector new: stickyPaths length.	for i to: stickyPaths length do		[stickyPartsi _ stickyPathsi applyTo: selection]]\gb30B1i47I48i27I5i52IfixMove: pt | i part newpt	["I want to  move to pt.  Return pt if I didn't stick to anything, otherwise		the point to which I am sticking.  If I stuck to something, and the		change in my attacher's location would be 0, return false instead.		Also, keep track of whether I'm sticking to something by setting		the appropriate element of selectionMerges."	for i to: stickyParts length do		[part_stickyPartsi.		part has: pt			[selectionMergesattacherNum_stickyPathsi.			newpt_part location.			newpt=attacher location[false]			newpt]].	"I didn't stick to anything"	selectionMergesattacherNum_nil.	pt]\gb12B18i19u2U10u2U277u15U1I198i26Imoveto: pt | newpt	["Move the current attacher to pt, and drag along the other attachers.		Stick to any nearby sticky part.  If I stuck to something, don't		blink the picture.  If selectionMove isn't nil, then also tell		the selection to move one of its parts by performing this selector."	newpt_self fixMove: pt.	newptfalse["I'm sticking to something, and haven't moved.		Don't blink the picture."]	carrierReceiver perform: carrierMove with: newpt-attacher location.	selectionMovenil		[window copyFromBuffer.		carrier perform: showCarrier with: window picturePane]	selectionReceiver perform: selectionMove with: newpt-selectionPart location.	"If there is a selector for showing the moving foreground separately from		the unchanging background, use it"	[showForegroundnil[window showBuffered]		selection perform: showForeground with: window buffer.		window copyFromBuffer].	self showMovingCarrier]\gb11B11i29u2U130u13U96I42i72I255i108InextAttacher | oldAttacher message transform keywords	["Get the next attacher from attacherObjects, and update sticky parts.		Find the selector carrierMove for moving the new attacher.		For the first attacher, this is simply a moveby: .		If this isn't the first attacher, move the cursor to the next		attacher."	attacherNum_attacherNum+1.	attacherNum>attacherObjects length[attacher_false]	oldAttacher_attacher.  attacher_attacherObjectsattacherNum.	self findStickyParts: oldAttacher.	keywords_[attacherNum=1[('moveby:')] self attacherKeywords].	message_Message new 		context: carrier		receiver: EmptyPath		constraint: nil owner: EmptyPath		keywords: keywords		arguments: ('delta')		uniqueState: true referenceOnly: false compileTimeOnly: false.	transform_carrier transform: message.	carrierMove_transform selector.	carrierReceiver_transform receiver applyTo: carrier.	attacherNum>1[window picturePane cursorloc_attacher location]]\gb13B44i27u15U47u11U73u7U78ISubclass Defaults\f5bgaction  "return a string describing my action"	['no action']\gb8B1i36IattacherKeywords	["return the keyword to use in positioning attachers other than the first"	user notify: 'should only be invoked by a subclass that re-defines me']\gb18B2i71IfindAttachers	[attachers_EmptyPath inVector]\gb15BfindShowSelector	[showCarrier_window formatPane showSelector]\gb18BperformAction	[window copyFromBuffer]\gb15BpositionAttacher: position offset: offset\gbshowMovingCarrier	[carrier perform: showCarrier with: window picturePane]\gb19B\gSystemOrganization classify: Tool under: 'ThingLab Editing Tools'.\g"Deleter"l15000z20000\f5bgClass new title: 'Deleter'	subclassof: Tool	fields: ''	declare: '';	asFollows\f5bgThis class has not yet been commented\igTool Protocol\f5bgaction ['delete']\gb7BfindShowSelector	[showCarrier_showdeleted:]\gb18BperformAction | m	[self willChangeStructure.	"delete anything the carrrier stuck to"	for m from: selectionMerges do		[mnil[]		selection delete: m].	window showBuffered]\gb14B34i37I\gSystemOrganization classify: Deleter under: 'ThingLab Editing Tools'.\g"Inserter"l15000z20000\f5bgClass new title: 'Inserter'	subclassof: Tool	fields: ''	declare: '';	asFollows\f5bgThis class has not yet been commented\igTool Protocol\f5bgaction ['insert']\gb7BattacherKeywords	[ ('moveInserter' + attacherNum asString + ':') inVector]\gb18BfindAttachers	[attachers_carrier inserters]\gb15BperformAction | insertPath i	[self willChangeStructure.	insertPath_selection insert: carrier.	"merge the carrier's attachers with nearby parts of the selection"	for i to: attachers length do		[(selectionMergesi)nil[]		selection merge: (selectionMergesi) , (insertPath concat: attachersi)].	window showBuffered]\gb14B84i64IpositionAttacher: position offset: offset | pt	["If redbug is held down and the user moves away		from the point where redbug was pushed, move both the carrier		and attached parts of the selection"	while user redbug do		[pt_user mp.		selectionMovenil			[position has: pt[] self findSelectionMove]		self moveto: pt-offset]]\gb42B8i148I\gSystemOrganization classify: Inserter under: 'ThingLab Editing Tools'.\g"Constrainer"l15000z20000\f5bgClass new title: 'Constrainer'	subclassof: Inserter	fields: ''	declare: '';	asFollows\f5bgThis class has not yet been commented\igTool protocol\f5bgaction ['constrain']\gb7BattacherKeywords	[ ('moveConstrainer' + attacherNum asString + ':') inVector]\gb18BfindAttachers	[attachers_carrier constrainers]\gb15B\gSystemOrganization classify: Constrainer under: 'ThingLab Editing Tools'.\g"MergingMover"l15000z20000\f5bgClass new title: 'MergingMover'	subclassof: Tool	fields: ''	declare: '';	asFollows\f5bgThis class has not yet been commented\igTool Protocol\f5bgaction ['merge']\gb7BperformAction | m	[window copyFromBuffer.  "image is ok"	selectionPathnil[]	"merge the moving part with nearby parts of the selection"	self willChangeStructure.	for m from: selectionMerges do		[mnil[]		selection merge: m , selectionPath]]\gb14B31i11I26i56IpositionAttacher: position offset: offset	[self findSelectionMove.	while user redbug do		[self moveto: user mp-offset]]\gb43BshowMovingCarrier	["don't show carrier after moving starts"]\gb19B2i38I\gSystemOrganization classify: MergingMover under: 'ThingLab Editing Tools'.\g"Mover"l15000z20000\f5bgClass new title: 'Mover'	subclassof: Tool	fields: ''	declare: '';	asFollows\f5bgThis class has not yet been commented\igTool Protocol\f5bgaction ['move']\gb7BpositionAttacher: position offset: offset	[self findSelectionMove.	stickyParts_stickyPaths_().  "disable sticking"	while user redbug do		[self moveto: user mp-offset]]\gb43B57i16IshowMovingCarrier	["don't show carrier after moving starts"]\gb19B2i38I\gSystemOrganization classify: Mover under: 'ThingLab Editing Tools'.\g"TextEditor"l15000z20000\f5bgClass new title: 'TextEditor'	subclassof: Tool	fields: 'textframe para event loc1 loc2 p1 p2 oldpara'	declare: 'paste esc cut ctlchars runvals Scrap bs editmenu typein Deletion ctlw ';	asFollows\f5bgThis class has not yet been commented\igTool protocol\f5bgaction ['edit text']\gb7BpositionAttacher: position offset: offset | i	["if the current attacher should merge with a part in the selection,		start up its text editor."	i_1.	while (selectionPathnil and istickyParts length) do		[attacher shouldMergeWith: stickyPartsi			[selectionPath_stickyPathsi.  selectionPart_stickyPartsi.			stickyParts_stickyParts replace: i to: i by: ().			stickyPaths_stickyPaths replace: i to: i by: ()]		i_i+1].	selectionPathnil[nil]	"start up the text editor in the sticky part of the selection"	window copyFromBuffer.	para_selectionPart para copy.  oldpara_false.	self initTextframe; startupEvents]\gb42B7i94I317i60IConstraint Satisfaction\f5bgaccept  "the newly edited text has been accepted - check constraints"		| message transform	[oldparafalse[self flash]	oldpara_false.	"NOTE: put in messages to chang selection's margins here"	"use changeValue rather than copyFrom, so that para is semialterable		rather than unalterable"	message_Message new 		context: selection		receiver: (selectionPath concat: (para) asPath)		constraint: nil owner: EmptyPath		keywords: ('changeValue:')		arguments: ('newpara')		uniqueState: true referenceOnly: false compileTimeOnly: false.	transform_selection transform: message.	(transform receiver applyTo: selection) 		perform: transform selector with: para.	"KLUDGE - try to find a showForeground selector.  If one can be found,		assume background in buffer is OK, and just perform that selector"	showForeground_selection foregroundSelector:		window formatPane showSelector message: message.	showForegroundnil[window showBuffered]	selection perform: showForeground with: window buffer.	window copyFromBuffer]\gb8B1i59I71i55I4i4u11U13u8U57I379i137IScheduling\f5bgeachEvent	[textframe window has: event		[user kbck[self kbd]		 user anybug			[user redbug[self redbugEvent]			user yellowbug[self yellowbugEvent]			user bluebug[self bluebugEvent]]		user anykeys[self keyset]]	self outside[]	user anybug[textframe window has: event[] false]	user kbck[user kbd. self flash] "flush typing outside"]\gb11B321i22Ienter	[typein _ false. self show; select]\gb7BfirstEvent	[textframe window has: event [self enter] false]\gb12BlastEvent	[self leave]\gb11Bleave	[self comp: p1 to: p2]\gb7BPublic Messages\f5bgagain | t	[self fintype.	t_ para findString: Deletion startingAt: loc2.	t=0[self flash]	loc1_ t.  loc2_ loc1+Deletion length.	self paste]\gb6Bcancel	[oldparafalse[self flash]	para _ oldpara. oldpara _ typein _ false. loc1 _ nil.	self initTextframe; show; select]\gb8Bcopy [Scrap _ self selection]\gb5Bcut [self fintype; replace: nullString; select.	Scrap _ Deletion]\gb4Bflash [window frame flash]\gb6BinitTextframe  "make textframe reflect the state of the selected TextThing"	[textframe_selectionPart asTextFrameIn: window picturePane]\gb15B1i5u9U44Ikbd | more char	[[loc1<loc2[self checklooks[self show. self select]]].	more _ Stream default.	[typein[] typein _ loc1].	while user kbck do		[(char _ user kbd)		=bs [more empty[loc1 _ 1 max: loc1-1. typein _ typein min: loc1]				more skip: 1]; 							"backspace"		=ctlw [more reset. loc1 _ 1 max: loc1-1.	"ctl-w for backspace word"				while [loc1>1[(para(loc1-1)) tokenish] false] do [loc1 _ loc1-1]				typein _ typein min: loc1];		=cut [self cut];		=paste [self paste];		=esc [	[more empty[] self replace: more contents. loc1 _ loc2].				self fintype. "select previous type-in"				loc1 _ loc2-Scrap length. self select]		more next_ char].	self replace: more contents. loc1_loc2.	user kbck[] self selectAndScroll]\gb4B262i11I45i26I238i25Ikeyset | k	[user keyset=1[self cut. user waitnokey];				=16[self paste. user waitnokey];				=0[]	while (k_ user keyset)0 do		[self scrollby:			([k allmask: 2[1] k allmask: 8[1] 0]) * ([k allmask: 4[4] 1])]]\gb7Boutside [false]\gb8Bpaste [self replace: Scrap; selectAndScroll]\gb6Brealign	[	[oldpara[] oldpara _ para recopy].	para alignment _ (1 2 4 0 0)(1+para alignment).	self show; select]\gb9BredbugEvent			" Track and complement redbug selection "	| a t drag2	[t _ textframe charnearpt: event.	self comp: p1 to: p2. self fintype.	[t=loc1[loc1=loc2[loc11				" double-bug "		[self selectword. self select] ]]].	drag2 _ true. loc1 _ loc2 _ t.		" start new selection "	p1 _ textframe reply1.  self comp: p1 to: self hairFromp1.	while user redbug do				" draw out selection "		[a _ textframe reply1.			[loc1=loc2[self comp: p1 to: p2. p2_ p1. drag2 _ tloc2]].			[drag2 [ [t<loc1[t_loc1. a_textframe ptofchar: t]].					self comp: a to: p2. loc2 _ t. p2 _ a]				[t>loc2[t_loc2. a_textframe ptofchar: t]].				self comp: p1 to: a. loc1 _ t. p1 _ a].			[loc1=loc2[self comp: p1 to: self hairFromp1]].		t _ textframe charnearpt: user mp]	]\gb15Bi41I118i14I73i23I88i22IScrap _ s [Scrap _ s]\gb10Bscrollby: n | l w	[n _ n max: (textframe frame origin y-4-textframe window origin y)/		(l_ textframe lineheight).	n _ n*l.	textframe frame moveby: 0(0-n).	"w _ [n<0[textframe window inset: 00 and: 0(0-n)]			textframe window inset: 0n and: 00].	w blt: w origin-(0n) mode: storing.		[n<0[w corner y _ w origin y - n]			w origin y _ w corner y - n]."	self show"in: w"; select"in: w"]\gb12BscrollPos [0.0]\gb10BscrollTo: ignored\gbscrollUp: n	[self scrollby: n/textframe lineheight]\gb13Bselect: loc1 | l dY i	[self comp: p1 to: p2. loc2_ loc1. self selectAndScroll]\gb13BselectAndScroll | l dY i	[l _ textframe lineheight. self select.	dY _ p1 y - textframe window origin y.	 [dY0 [dY _ (p1 y + l-1) - (textframe window corner y) max: 0]].	dY0[self scrollby: (dY abs+l-1)/l*dY sign]]\gb16Bselection	[para copy: loc1 to: loc2-1]\gb11BselectionAsStream	[Stream new of: para text from: loc1 to: loc2-1]\gb19Bselectword			"Select bracketed or word range for double-click"	| a b dir t level open close s	[a_ b_ dir_ 1.	open _ '([{< ''"'.	close _ ')]}> ''"'.		[loc1>para length[t_loc1-1]		loc11[dir_1. t_loc1]		t_open find: (a_para(loc1-1)). t>0		"delim on left"				[dir_1. b_closet. t_loc1-1]			"match to the right"		t_close find: (a_paraloc1). t>0			"delim on right"				[dir_1. b_opent. t_loc1]			"match to the left"		a_ 1. t_loc1].						"no delims - select a token"	level_1. s _ para text.	until [dir=1[ts length[] level=0[] false]			t1[] level=0[] false] do		[s(t_ t+dir) = b [level_ level-1];		"leaving nest"		= a [level_ level+1].						"entering nest"		a=1[(st) tokenish						"token check goes left "					[t=1[loc1_ dir_ 1. t_ loc2]]				dir=1[loc1 _ t+1. dir_1. t_loc2]	"then right"				level_ 0]]	[level0[t_ t+dir]].	dir=1[loc2_ t] loc1_ t+1]\gb13Bi49I189i15I36i20I39i16I34i19I24i28I146i14I31i15I30i24I75i12Ishow [textframe show: para]\gb5Bundo	[self fintype; replace: Deletion; select]\gb6Bunselect	[self comp: p1 to: p2. p2 _ p1]\gb10ByellowbugEvent	[editmenu bug		=1[self again];		=2[self copy];		=3[self cut];		=4[self paste];		=5[self Scrap _				(self execute: self selectionAsStream for: self) asString asParagraph];		=6[self accept. false];		=7[self undo];		=8[self cancel.  false];		=9[self realign]]\gb16BPrivate Messages\f5bgchecklooks | t val mask runvals	[t _ (166 150 137 151   230 214 201 215		135 159 144 143 128 127 129 131 180 149		199 223 208 207 192 191 240 226) find: user kbck.	t=0[false]	user kbd.	t=25[self toBravo]; "ctl-T" 	 =26[self fromBravo]. "ctl-F" 		[oldpara[] oldpara _ para recopy].	runvals _ (1 2 4 256   1 2 4 256  "ctl-b i - x   B I  X"		0 16 32 48 64 80 96 112 128 144  "ctl-0 1 ... 9"		160 176 192 208 224 240).  "ctl-shift-0 1 ... 5"	[(val_ runvalst)=256[mask_ 0377.  val_ 0]		"reset all"		val<0[mask_ 0-val.  val_ 0]		"reset emphasis"		val>0 and val<16[mask_ val]	"set emphasis"		mask_ 0360].				"set font"	para maskrun: loc1 to: loc2-1 under: mask to: val]" Set up kbmap for unmapped ctl chars:	 | x. (248 232 219 233   312 296 283 297		217 241 226 225 210 209 211 213 262 231		281 305 290 289 274 273 0502 0464) transform x to (kbMapx_ x).	ParagraphEditor classvars delete: (ctlchars runvals)."\gb11B204i7I26i7I79i23I36i15I30i22I46i11I33i16I33i14I19i10IclassInit	[bs _ 8. ctlw _ 145. esc _ 160.	cut _ 173. paste _ 158.	editmenu _ Menu new string:		'againcopycutpastedoitacceptundocancelalign'.]\gb11Bcomp: a to: b [self comp: a to: b with: black in: textframe window]\gb14Bcomp: a to: b with: color		"complement from point a to point b"	[self comp: a to: b with: color in: textframe window]\gb27Bi36Icomp: a to: b with: color in: w | t		"complement from a to b clipped on w"	[	[a y<b y[] (a y=b y) and: (a x<b x)[] t_a. a_b. b_t].	"force a < b"		[a y < b y			[((a rect: (w corner x-4)  (a y+textframe lineheight)) intersect: w)					comp: color.		"top line"			 a _ (w origin x+2)  (a y+textframe lineheight).			 a y < b y				[((a rect: (w corner x-4)  b y) intersect: w)					comp: color		"middle (if any)"]			]].		a y > b y[]		((a x  b y rect: b x  (b y + textframe lineheight)) intersect: w)					comp: color	"bottom (or only)"]\gb32B5i37I60i13I107i10I138i17I111i18Iexecute: parseStream	[Generator new evaluate: parseStream in: false to: nil notifying: self]\gb22Bfintype	[typein		[	[typein<loc1				[Scrap _ (para copy: typein to: loc1-1) text.				loc1 _ typein]].		typein _ false]	false]\gb9BfromBravo	[para _ para fromBravo. loc1 _ nil]\gb11BhairFromp1		"doesnt leave tracks in the left margin"	[p2_ p1 + [p1 x=textframe frame minX[10] 10]]\gb12Bi40bI2Bnotify: errorString at: position in: stream	[self		fintype;		select: position;		replace: ('' + errorString + '') asParagraph;		select.	false]\gb45Breplace: t	[	[oldpara[] oldpara _ para copy].		[loc1<loc2[Deletion _ para copy: loc1 to: loc2-1]].	para _ para replace: loc1 to: loc2-1 by: t.	loc2 _ loc1 + t length.	self show]\gb12Bselect  "compute p1, p2 from loc1, loc2"	[self selectin: textframe window]\gb8Bi32Iselectin: w	[	[loc1nil [loc1_loc2_1]].	p1 _ textframe ptofchar: loc1.	p2 _ [loc2=loc1[self hairFromp1] textframe ptofchar: loc2].	self comp: p1 to: p2 with: black in: w]\gb13BstartupEvents		"loopless scheduling"	[event_user mp.	self firstEvent		[while [self eachEvent] do [event_user mp].		self lastEvent]	false]\gb15BtoBravo	[para _ para toBravo]\gb9B\gSystemOrganization classify: TextEditor under: 'ThingLab Editing Tools'.\gTextEditor classInit\g